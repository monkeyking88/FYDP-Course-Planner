# sudo pip install gflags
# USAGE: python transcript_parser.py --from_json_file blah.json [--to_als_file blah.als]
# --to_als_file is optional, if not specified it will be the same name as input file with extension changed
import gflags
import json
import sys
import re

FLAGS = gflags.FLAGS

gflags.DEFINE_string('from_json_file', 'sample_transcript.json', 'JSON transcript file generated by Byron\'s UW API')
gflags.DEFINE_string('to_als_file', '', 'Name of output als file')

def main(argv):
  transcript_template = '''open course

//Hard coded transcript of a student
fun transcript [] : set Course {
    CoreCourse +
    %s
}

//Making an exception for course substitution ECE100 for SE101
/*
fun substitutions [] : List -> Course -> Course {
	Core -> ECE100 -> SE101
}
*/
'''
  CR_BASIS = ['CNC', 'CNP', 'CNW', 'NGP']
  NUM_NO_CR = ['NG', 'WD']
  # parse flags
  try:
    argv = FLAGS(argv)
  except gflags.FlagsError, e:
    print '%s\\nUsage: %s ARGS\\n%s' % (e, sys.argv[0], FLAGS)
    sys.exit(1)

  # read json file
  try:
    json_file = open(FLAGS.from_json_file, 'r')
    json_str = json_file.read()
  except:
    print 'JSON file <%s> error' % FLAGS.from_json_file
    sys.exit(1)

  try:
    # parse json file to python dict object
    transcript_dict = json.loads(json_str)
    # pick out the passed courses
    passed_courses_info = filter(lambda x: x['course_grade'] and (
                                   # more conditions to add...
                                   (x['details']['grading_basis'] == 'NUM' and not (x['course_grade'] in NUM_NO_CR) and int(x['course_grade']) > 60) or
                                   (x['details']['grading_basis'] in CR_BASIS and x['course_grade'] == 'CR') or
                                   (x['details']['grading_basis'] == 'TRN')),
                                 transcript_dict['courses'])
    # generate a python list object to obtain the passed courses (format 'SE101')
    passed_courses_list = ['%s%s' % (x['subject_code'], x['catalog']) for x in passed_courses_info]
    #print transcript_template % ' +\n    '.join(passed_courses_list)
  except:
    print 'JSON transcript <%s> content error' % FLAGS.from_json_file
    sys.exit(1)

  # replace last occurrence of json to als in json file name
  if FLAGS.to_als_file:
    als_file_name = FLAGS.to_als_file
  else:
    als_file_name = re.sub(r'(.*)json', r'\1als', FLAGS.from_json_file)
  # write alloy code to als file
  try:
    als_file = open(als_file_name, 'w')
    als_file.write(transcript_template % ' +\n    '.join(passed_courses_list))
    als_file.close()
  except:
    print 'Error occured when output to %s' % als_file_name
    

if __name__ == '__main__':
  main(sys.argv)
